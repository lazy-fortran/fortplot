name: Windows CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  windows-test:
    runs-on: windows-latest
    
    steps:
    - name: Configure git line endings
      shell: bash
      run: git config --global core.autocrlf input
      
    - uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false  # Skip update for faster installation
        path-type: inherit
        cache: true    # Cache packages between runs for speed
        release: false # Use pre-installed MSYS2 on runner
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-ffmpeg
          mingw-w64-x86_64-imagemagick
          git

    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Cache FPM binary (Windows)
      id: cache-fpm-win
      uses: actions/cache@v4
      with:
        path: C:\msys64\mingw64\bin\fpm.exe
        key: ${{ runner.os }}-fpm-0.12.0

    - name: Install FPM
      if: steps.cache-fpm-win.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Verify installations
      shell: cmd
      run: |
        echo === Verifying installations ===
        gfortran --version
        gcc --version
        fpm --version
        ffmpeg -version
        magick -version
        echo === Environment verification complete ===

    - name: Create test directories
      shell: cmd
      run: |
        echo Creating test output directories...
        if not exist build\test mkdir build\test
        if not exist output\example\fortran\basic_plots mkdir output\example\fortran\basic_plots
        if not exist output\example\fortran\legend_demo mkdir output\example\fortran\legend_demo
        if not exist output\example\fortran\marker_demo mkdir output\example\fortran\marker_demo
        echo Test directories created.

    - name: Build project
      shell: cmd
      run: |
        set FORTPLOT_ENABLE_FFMPEG=1
        fpm build --flag "-cpp -fmax-stack-var-size=65536 -Wno-implicit-interface"

    - name: Run Windows tests with built-in timeout protection
      shell: cmd
      run: |
        echo Running all tests with built-in timeout protection...
        set FORTPLOT_ENABLE_FFMPEG=1
        set OMP_NUM_THREADS=2
        set FORTPLOT_WINDOWS_CI=1
        echo === Built-in timeout protection active ===
        echo FFmpeg pipe timeouts: 5 seconds
        echo System command timeouts: 3 seconds  
        echo Parallel threads: 2 (Windows CI optimization)
        echo Set FORTPLOT_DEBUG_TIMEOUT=1 for verbose logging
        echo ===============================================
        fpm test --flag "-cpp -fmax-stack-var-size=65536 -Wno-implicit-interface"
    
    - name: Run antialiasing quality tests with ImageMagick (optional on Windows)
      continue-on-error: true
      shell: cmd
      run: |
        echo Checking for ImageMagick...
        magick -version
        echo.
        echo Running graphics quality tests (optional on Windows due to path issues)...
        fpm test test_antialiasing_restoration --flag "-cpp -fmax-stack-var-size=65536 -Wno-implicit-interface" || echo Test skipped due to ImageMagick detection issue on Windows
        fpm test test_antialiasing_comprehensive --flag "-cpp -fmax-stack-var-size=65536 -Wno-implicit-interface" || echo Test skipped due to ImageMagick detection issue on Windows